{% extends "layout.html.jinja" %}
{% block title %} Edit Playlist {% endblock %}
{% block page_title %}
<h1 id="playlistTitle">
    Playlist Name
</h1>
{% endblock %}

{% block content %}
{% if user_session != None %}
<div class="pure-g double-content-container">
    <div class="pure-u-5-12 horizontal-double-content">
        <div class="pure-form pure-u-1 double-header">
            <input type="text" class="pure-input-rounded" placeholder="Find a Song..." id="songSearch" />
            <button class="pure-button" onclick="searchForSong()">Search</button>
        </div>
        <div class="songlst" id="searchedSongsDiv">
        </div>

    </div>
    <div class="pure-u-5-12 horizontal-double-content">
        <div class="pure-g song-feild double-header">
        <div class="pure-u-1-5 " id="playlistImageDiv" onclick="changePlaylistImage()">
            <img src="" alt="Playlist Image" id="playlistImage" class="small-playlist-icon">
            <input type="file" id="imageUpload" style="display: none;" accept="image/*" onchange="previewImage(this)">
        </div>
            <div class="pure-u-1-3">
                <div class="pure-form pure-u-1">
                    <input type="text" id="playlistNameInput" style = " margin: 2em;" placeholder="Name your playlist..." value="{{ playlistDetails.name }}" onchange="changeTitle()"/>
                </div>
            </div>
            {%if playlistDetails.tags%}2
                {% for tag in playlistDetails.tags %}
                    <div class="tag pure-u-1-5">
                        {{ tag }}
                    </div>SavedPlaylists
                {% endfor %}
            {%endif%}
            <div class="pure-u-1 input-button-container pure-form" style = "margin: 0.5em;" >
                
                <input type="text" id="tagInput" placeholder="add a tag..." style = "border-radius: 0;" />
                <button class = "input-button"> Add Tag</button>
                
            </div>
        </div>
        
        <div class="songlst" id="currentSongsDiv">
        </div>
        <div class="right-align">
            <button onclick="saveChanges()" class="save-button pure-button">Save Changes</button>
        </div>
    </div>

</div>
</div>
{% else %}
<p> You can't access this page with out loging in</p>
<a href="/login" class="pure-menu-link">Log in</a>
{% endif %}

<script>
    function searchForSong() {
        const searchQuery = document.getElementById("songSearch").value;
        const fetchURL = `/spotify/search?q=${encodeURIComponent(searchQuery)}`;
        console.log(fetchURL);
        console.log("Searching for song: ", searchQuery);
        fetch(fetchURL, {
            method: 'GET', // Ensure method is specified as 'GET'
            headers: {
                'Content-Type': 'application/json'
            }
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(searchRes => {
                // Do something with the search results
                searchRes.forEach(function (searchedSong) {
                    makeAddSongCard(searchedSong)
                });
            })
            .catch(error => {
                console.error('Error fetching data:', error);
            });
    }
    
    function makeDeleteSongCard(song) {
        console.log("Called makeDeleteSongCard with ", song);
        // Creating elements dynamically
        var songDiv = document.createElement("div");
        songDiv.className = "pure-g song";
        songDiv.id = song.songID;

        var songIconDiv = document.createElement("div");
        songIconDiv.className = "pure-u-1-5";
        var songIconImg = document.createElement("img");
        songIconImg.className = "small-playlist-icon"
        songIconImg.src = song.picture;
        songIconImg.alt = "Song Icon";
        songIconDiv.appendChild(songIconImg);

        var songTitleDiv = document.createElement("div");
        songTitleDiv.className = "pure-u-3-5 song-title";
        songTitleDiv.textContent = song.name;

        var deleteButton = document.createElement("button");
        deleteButton.className = "add-song";
        deleteButton.setAttribute("onclick", "deleteSong('" + song.songID + "', '" + song.name + "', '" + song.picture + "')");
        var deleteButtonText = document.createElement("h1");
        deleteButtonText.textContent = "-";
        deleteButton.appendChild(deleteButtonText);

        deleteButton.addEventListener("click", function (event) {
            event.stopPropagation(); // Prevent parent event triggering
        });

        // Appending elements to songDiv
        songDiv.appendChild(songIconDiv);
        songDiv.appendChild(songTitleDiv);
        songDiv.appendChild(deleteButton);
        console.log("Made songDiv", songDiv);
        return songDiv;
    }

    // INITIALIZATION:
    var playlistSongIDs = [];
    var newSongs = [];
    const userID = "{{ user_id }}";
    const playlistID = "{{ playlistID }}";
    console.log(playlistID)
    var songs = {{ songs | tojson }};
    var playlistDetails = {{ playlistDetails | tojson }};
    var newPlaylist = playlistID===(undefined || null) ? true : false; // if a new playlist
    console.log("playlist song ids: ", playlistSongIDs);
    console.log(songs);
    songs.forEach(song => {
        addSong(song.songID, song.name, song.picture, false, song.artist, song.album, song.duration);
    });
    // extract playlist name and image
    var playlistImageData = playlistDetails.image;
    var playlistImageElem = document.getElementById("playlistImage");
    playlistImageElem.src = playlistImageData;
    var playlistTitleElem = document.getElementById("playlistTitle");
    playlistTitleElem.textContent = playlistDetails.name;

    function makeAddSongCard(song) {
        console.log("Called makeAddSongCard with ", song);
        // Creating elements dynamically
        var songDiv = document.createElement("div");
        songDiv.className = "pure-g song";
        songDiv.id = song.id;

        var songIconDiv = document.createElement("div");
        songIconDiv.className = "pure-u-1-5 song-icon";
        var songIconImg = document.createElement("img");
        songIconImg.className = "small-playlist-icon"
        songIconImg.src = song.image;
        songIconImg.alt = "Song Icon";
        songIconDiv.appendChild(songIconImg);

        var songTitleDiv = document.createElement("div");
        songTitleDiv.className = "pure-u-3-5 song-title";
        songTitleDiv.textContent = song.name;

        var addButton = document.createElement("button");
        addButton.className = "add-song";
        addButton.setAttribute("onclick", "addSong('" + song.id + "', '" + song.name + "', '" + song.image + "', '" + true + "', '" + song.artist + "', '" + song.album + "', '" + song.duration +"')");
        var addButtonText = document.createElement("h1");
        addButtonText.textContent = "+";
        addButton.appendChild(addButtonText);

        addButton.addEventListener("click", function (event) {
            event.stopPropagation(); // Prevent parent event triggering
        });

        // Appending elements to songDiv
        songDiv.appendChild(songIconDiv);
        songDiv.appendChild(songTitleDiv);
        songDiv.appendChild(addButton);
        let newSongsContainer = document.getElementById("searchedSongsDiv");
        newSongsContainer.appendChild(songDiv)
        
        console.log("Made songDiv", songDiv);
        return songDiv;
    }

    function addSong(id, name, image, remove, artist, album, duration) {
        console.log("song being added");
        // Add song to arrays, reset HTML for songs section
        console.log("ADDING SONG HERE")
        console.log(remove)
        console.log(album)
        let newSong = {}
        if (artist != "") {
            console.log("IN IF")
            newSong = {songID: id, name: name, picture: image, artist: artist, album: album, duration: duration}
            newSongs.push(newSong)
        } else {
            newSong = {songID: id, name: name, picture: image}
        }
        
        playlistSongIDs.push(newSong.songID);
        console.log(newSong)
        let songDiv = makeDeleteSongCard(newSong)
        let currentSongsContainer = document.getElementById("currentSongsDiv");
        let searchedSong = document.getElementById(id);
        currentSongsContainer.appendChild(songDiv);
        console.log(remove)
        if (remove) {
            searchedSong.remove();
        }
    }

    function deleteSong(id, name, image) {
        let songDiv = document.getElementById(id);
        console.log("deleteSong songDiv: ", songDiv);
        songDiv.remove();
        // Remove from ids array
        var index = playlistSongIDs.indexOf(id);
        playlistSongIDs.splice(index, 1);
    }

    function changePlaylistImage() {
        console.log("Changing playlist pfp");
        document.getElementById('imageUpload').click(); // Trigger the file input click event
    }

    function previewImage(input) {
        console.log("Previewing image");
        const file = input.files[0]; // Get selected file
        const reader = new FileReader(); 
        reader.onload = function (e) {
            playlistImageData = e.target.result; // get data
            playlistImageElem.src = playlistImageData
        };
        reader.readAsDataURL(file);
    }

    function changeTitle(){
        let name = document.getElementById("playlistNameInput");
        playlistTitleElem.textContent = name.value;
    }

    function saveChanges() {
        console.log("playlist song ids: ", playlistSongIDs);
        const playlistName = document.getElementById('playlistNameInput').value;
        const data = {
            user_id: userID,
            playlist_id: playlistID,
            new_playlist: newPlaylist,
            song_ids: playlistSongIDs,
            new_songs: newSongs,
            playlist_image: playlistImageData,
            playlist_name: playlistName,
        };
        console.log(data);
        fetch('/save-playlist', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                else {
                    // newPlaylist===true ? window.alert("Playlist created") : window.alert("Playlist updated");
                    window.location.reload();
                }
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
            });
    }
</script>
{% endblock %}