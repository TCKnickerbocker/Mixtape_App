{% extends "layout.html.jinja" %}
{% block title %}Home{% endblock %}
{% block page_title %}
<h1>Playlist</h1>
{% endblock %}


{% block content %}
<div class="pure-g horizontal-double-content">
    <div class="pure-u-6-12">
        <div class="pure-g">
            <div class="pure-u-1-6 small-playlist-icon">
                {# {% playlist.image %} #}
                Picture of Playlist
            </div>
            <div class="pure-u-1-6 user-icon">
                {# {% playlist.user_image %} #}
                User's PFP
            </div>
            <div class="pure-u-3-6" style="padding: 2em 0.5em;">
                {# {% playlist.playlist_name %} #}
                Name of Playlist
                <div style="padding: 0.5em 1em;">
                    <button id="star1" class="star-button star-button-selected" onclick="addrating(1)">
                        <div class="stars-filled"></div>
                    </button>
                    <button id="star2" class="star-button" onclick="addrating(2)">
                        <div class="stars-filled"></div>
                    </button>
                    <button id="star3" class="star-button" onclick="addrating(3)">
                        <div class="stars-filled"></div>
                    </button>
                    <button id="star4" class="star-button" onclick="addrating(4)">
                        <div class="stars"></div>
                    </button>
                    <button id="star5" class="star-button" onclick="addrating(5)">
                        <div class="stars"></div>
                    </button>
                </div>
            </div>
        </div>
        <div class="songlst">
            {% for song in songs %}
            {% include "songcard.html.jinja" ignore missing with context %}
            {% endfor %}
        </div>
    </div> 
    <div class="pure-u-6-12 horizontal-double-content">
        <div class="commentlst">
            <div class="pure-g">
                <div class="pure-u-1-2">
                    <button class="newcomment" onclick="toggleComment('comment-create-box')">
                        + Add a comment
                    </button>
                </div>
                <div class="pure-u-1-2">
                    <button class="newcomment" onclick="toggleComment('comment-create-box')">
                        + Add a rating
                    </button>
                </div>
            </div>
            <div>
                {% for comment in comments %}
                {% include "commentcard.html.jinja" ignore missing with context %}
                {% endfor %}
            </div>
            <div class="right-align">
                <!-- Save Button (Bottom Right) -->
                <form class="pure-form pure-u-1" method="POST" action="/library">
                    <button onclick="savePlaylist()" class="save-button pure-button">Save Playlist</button>
                </form>
            </div>
        </div>
    </div>
</div>
{# JS handles the submission of these:  #}
<div id="comment-create-box" style="display: none;">
    <form id="comment-form" class="pure-form pure-form-stacked" onsubmit="toggleComment('comment-create-box')">
        <fieldset>
            <legend>Leave a comment</legend>
            <textarea id="comment-text" rows="4" cols="100" class="pure-input-1" placeholder="Write something" minlength="1"></textarea>
            <button type="submit" class="pure-button pure-button-primary">Cancel</button>
            <button type="submit" class="pure-button pure-button-primary">Post</button>
        </fieldset>
    </form>
</div>


<script>
    const userID = "{{ user_id }}"; 
    var playlistID = "{{ playlist_id }}"; 
    var starButtons = document.querySelectorAll('.star-button');
    // spotify_connected=session['spotify'] is not None -> user not logged into spotify
    // if user_id is None -> user not logged into our site
    starButtons.forEach(function (star, index) {
        star.onclick = function () {
            addRating(index + 1);  // add rating to back-end
            changeStarClass(star, index + 1, 'star-button-selected');
        }
    });

    function changeStarClass(element, selectedIndex, className) {
        // Remove 'star-button-selected' class from all stars
        starButtons.forEach(function (star, index) {
            if (index < selectedIndex) {
                star.classList.add(className);
            } else {
                star.classList.remove(className);
            }
        });
    }
    function addRating(stars) {
        if (userID === undefined) {  // user not signed in ?
            return;
        }
        var xhr = new XMLHttpRequest();
        xhr.open("POST", "/ratePlaylist", true);
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"); // Change content type
        var requestBody = `user_id=${encodeURIComponent(userID)}&playlist_id=${encodeURIComponent(playlistID)}&stars=${encodeURIComponent(stars)}`; // Construct query parameters
        xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
                console.log(xhr.responseText);
            }
        };
        xhr.send(requestBody);
    }

    function savePlaylist() {
        console.log('User saving this playlist...');
        if (userID === undefined) {  // user not signed in ?
            return;
        }
        var xhr = new XMLHttpRequest();
        xhr.open("POST", "/savePlaylist", true);
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"); // Change content type
        var requestBody = `user_id=${encodeURIComponent(userID)}&playlist_id=${encodeURIComponent(playlistID)}`; // Construct query parameters
        xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
                console.log(xhr.responseText);
            }
        };
        xhr.send(requestBody);
    }

    function toggleComment(id) {
        var x = document.getElementById(id);
        if (x.style.display === "none") {
            x.style.display = "block";
        } else {
            x.style.display = "none";
        }
    }

    // Handle comment submissions:
    document.addEventListener("DOMContentLoaded", function () {
        const commentForm = document.getElementById("comment-form");
        commentForm.addEventListener("submit", function (event) {
            event.preventDefault(); // Prevent default form submission behavior
            const commentText = document.getElementById("comment-text").value;
            // Construct query parameters directly in the URL
            const url = `/playlist/${encodeURIComponent(playlistId)}/addComment?userID=${encodeURIComponent(userId)}&commentText=${encodeURIComponent(commentText)}`;
            
            // POST to backend
            const xhr = new XMLHttpRequest();
            xhr.open("POST", url, true);
            xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"); // Change content type
            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4 && xhr.status === 200) {
                    console.log("Comment added successfully");
                }
            };
            xhr.send();
        });
    });

</script>
{% endblock %}